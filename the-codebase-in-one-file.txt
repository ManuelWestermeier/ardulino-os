
//filepath: apps\browser\index.hpp
#ifndef APPS_BROWSER_INDEX_HPP
#define APPS_BROWSER_INDEX_HPP

#include <functional>
#include "../../utils/structs/pos.hpp"
#include "../../globals.hpp"
#include "../../utils/structs/text.hpp"
#include "../../utils/structs/clickable.hpp"
#include "../../utils/structs/input.hpp"
#include "../../utils/structs/stored-map.hpp"
#include "../../utils/structs/app-state-menager.hpp"

namespace BrowserApp
{
    namespace Pages
    {
        void NoPage(Location loc);
        void Home(std::map<std::string, std::string>);
        void BrowserView(std::map<std::string, std::string>);
        void Tabs(std::map<std::string, std::string>);
    };

    std::function<void(Pos)> currentOnclickHandler = nullptr;

    std::vector<Route> routes = {
        // all routes
        Route({RoutePart("home", false)}, Pages::Home),
        Route({RoutePart("tabs", false)}, Pages::Tabs),
        Route(
            Location({
                RoutePart("browser-view", false), // Static "browser-view" as a variable part
                RoutePart("secure", true),        // Variable for secure/unsecure
                RoutePart("version", true),       // Variable for version
                RoutePart("host", true),          // Variable for host
                RoutePart("port", true),          // Variable for port
                RoutePart("route", true)          // Variable for route
            }),
            Pages::BrowserView),
    };

    AppStateManager pages({RoutePart("home")}, routes, Pages::NoPage);

    namespace State
    {
        FlashHashMap webSiteData("web-site-data");
    }

    // helpers
    bool WaitForConnected();

    // functions
    void Update();
    void Scroll(signed char direction);
    void OnExit();
    void OnClick(Pos clickPos);
    void Submit();
    byte Start(const String &);
};

#include "./pages/no-page.hpp"
#include "./pages/home.hpp"
#include "./pages/tabs.hpp"
#include "./pages/browser-view.hpp"

#include "./update.hpp"
#include "./scroll.hpp"
#include "./submit.hpp"
#include "./start.hpp"
#include "./on-exit.hpp"
#include "./on-click.hpp"

#endif


//filepath: apps\browser\on-click.hpp
#ifndef APPS_BROWSER_ON_CLICK_HPP
#define APPS_BROWSER_ON_CLICK_HPP

#include "../../globals.hpp"
#include "../../app-renderer.hpp"
#include "../../utils/structs/pos.hpp"
#include "./index.hpp"

void BrowserApp::OnClick(Pos clickPos)
{
    if (WiFi.status() != WL_CONNECTED) // Fixed typo here
    {
        if (Button(2, 0, "Connect").collidesWith(clickPos))
            AppRender::appOpened = "wifi";

        return;
    }

    if (currentOnclickHandler != nullptr)
        currentOnclickHandler(clickPos);
}

#endif

//filepath: apps\browser\on-exit.hpp
#ifndef APPS_BROWSER_ON_EXIT_HPP
#define APPS_BROWSER_ON_EXIT_HPP

#include "../../globals.hpp"
#include "./index.hpp"

void BrowserApp::OnExit()
{
}

#endif

//filepath: apps\browser\pages\browser-view.hpp
#pragma once

#include "../index.hpp"
#include "../../../globals.hpp"
#include "../../../utils/structs/app-state-menager.hpp"
#include "../../../utils/structs/text.hpp"
#include "../../../utils/structs/clickable.hpp"
#include "../../../utils/structs/input.hpp"

void BrowserApp::Pages::BrowserView(std::map<std::string, std::string>)
{
    ClearAppScreen();
    Text(1, 1, "Browser View").Draw();
}

//filepath: apps\browser\pages\home.hpp
#pragma once

#include "../index.hpp"
#include "../../../globals.hpp"
#include "../../../utils/structs/app-state-menager.hpp"
#include "../../../utils/structs/text.hpp"
#include "../../../utils/structs/clickable.hpp"
#include "../../../utils/structs/input.hpp"

// create the elements
Input goToViewInput(0, 0, 19, "website ip:port...", "192.168.178.33");
Btn openTabsButton = Button(1, 2, "tabs");
Btn openTabButton = Button(2, 2, "open tab");

void BrowserApp::Pages::Home(std::map<std::string, std::string>)
{
    ClearAppScreen();
    // render the elements
    openTabsButton.Draw();
    openTabButton.Draw();
    goToViewInput.Draw();

    // Onclick
    currentOnclickHandler = [&](Pos clickPos) { //
        goToViewInput.OnClick(clickPos);
    };
}

//filepath: apps\browser\pages\no-page.hpp
#pragma once

#include "../index.hpp"
#include "../../../globals.hpp"
#include "../../../utils/structs/app-state-menager.hpp"
#include "../../../utils/structs/text.hpp"
#include "../../../utils/structs/clickable.hpp"

void BrowserApp::Pages::NoPage(Location loc)
{
    ClearAppScreen();
    Text(1, 1, "Page Not Found").Draw();
    Button(2, 0, "Home").Draw();
    currentOnclickHandler = ([](Pos clickPos) { //
        if (Button(2, 0, "Home").collidesWith(clickPos))
            pages.Navigate({RoutePart("home")});
    });
}

//filepath: apps\browser\pages\tabs.hpp
#pragma once

#include "../index.hpp"
#include "../../../globals.hpp"
#include "../../../utils/structs/app-state-menager.hpp"
#include "../../../utils/structs/text.hpp"
#include "../../../utils/structs/clickable.hpp"
#include "../../../utils/structs/input.hpp"

void BrowserApp::Pages::Tabs(std::map<std::string, std::string>)
{
    ClearAppScreen();
    Text(1, 1, "Tabs").Draw();
}

//filepath: apps\browser\scroll.hpp
#ifndef APPS_BROWSER_SCROLL_HPP
#define APPS_BROWSER_SCROLL_HPP

#include "../../globals.hpp"
#include "./index.hpp"

void BrowserApp::Scroll(signed char direction)
{
}

#endif

//filepath: apps\browser\start.hpp
#ifndef APPS_BROWSER_START_HPP
#define APPS_BROWSER_START_HPP

#include "../../globals.hpp"
#include "../../utils/structs/mwpl.hpp" // Use correct include path with the MWPL class
#include "./index.hpp"

byte BrowserApp::Start(const String &url)
{
    Serial.println("Starting BrowserApp with URL: " + url);

    MWPL mwpl(url); // Attempt to parse the URL using the MWPL class

    // Guard clause: Return early if the URL is invalid (i.e., missing host)
    if (mwpl.host.empty())
    {
        Serial.println("Invalid URL: Missing host or invalid format");
        return 1; // Return error code if the URL is invalid
    }

    // If the URL is valid, initialize state or load the initial route
    pages.Navigate({
        RoutePart("browser-view", false),
        RoutePart(mwpl.secure ? "s" : "us", false), // Secure or unsecure
        RoutePart(mwpl.version, false),             // Version
        RoutePart(mwpl.host, false),                // Host
        RoutePart(mwpl.port, false),                // Port
        RoutePart(mwpl.route, false)                // Route
    });

    Serial.println("Navigation started to route: " + mwpl.route);

    // Return a success status code (0)
    return 0;
}

#endif // APPS_BROWSER_START_HPP

//filepath: apps\browser\submit.hpp
#ifndef APPS_BROWSER_SUBMIT_HPP
#define APPS_BROWSER_SUBMIT_HPP

#include "../../globals.hpp"
#include "./index.hpp"

void BrowserApp::Submit()
{
    pages.Navigate({RoutePart("home")});
}

#endif

//filepath: apps\browser\update.hpp
#ifndef APPS_BROWSER_UPDATE_HPP
#define APPS_BROWSER_UPDATE_HPP

#include "../../globals.hpp"
#include "../../config.hpp"
#include "./index.hpp"

bool BrowserApp::WaitForConnected()
{
#ifndef DEBUG_HAS_WIFI
    static bool wasConnected;
    if (WiFi.status() != WL_CONNECTED)
    {
        // Render offline UI
        Text(1, 1, "No Wifi").Draw();
        Button(2, 0, "Connect").Draw(); // Fixed typo here
        wasConnected = WiFi.status() != WL_CONNECTED;
        return false;
    }

    if (!wasConnected)
    {
        ClearAppScreen();
    }
#endif
    return true;
}

void BrowserApp::Update()
{
    SetAppTitle("Browser", 7);

    if (!WaitForConnected())
        return;

    pages.Update();
}

#endif
